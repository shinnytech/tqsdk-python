name: Test and Deploy(Linux-py3.6-x64)

on:
  push:
    branches:
      - '*'
    tags:
      - '*'
  pull_request:
    branches:
      - 'master'

jobs:
  test:
    strategy:
      matrix:
        envinfo:
          - { name: 'linux-3.6-x64', os: ubuntu-latest, python-version: 3.6.x, python-arch: x64, TZ: 'Asia/Shanghai' }

    env:
        PYTHONIOENCODING: "utf-8"
        PYTHONHASHSEED: 32
        TZ: ${{ matrix.envinfo.TZ }}
        TESTLOGPATH: "./log_archive/"
        TESTLOGNAME: ${{ matrix.envinfo.name }}

    runs-on: ${{ matrix.envinfo.os }}

    steps:
    - name: Checkout
      uses: actions/checkout@v2

    - name: Giant Files List
      id: giant-files-list
      run: |
        git ls-files | xargs ls -l | sort -nrk5 | awk '{if($5 > ${{ secrets.FILE_LIMIT_SIZE }}) print $9 }' | xargs ls -lrth
        echo "::set-output name=GIANT-FILES-COUNT::$(git ls-files | xargs ls -l | sort -nrk5 | awk '{if($5 > ${{ secrets.FILE_LIMIT_SIZE }}) print $0}' | wc -l)"

    - name: Giant Files Check
      if: steps.giant-files-list.outputs.GIANT-FILES-COUNT != 0
      run: |
        echo "files size check failed"
        exit 1

    - name: Setup Node.js 12.x
      uses: actions/setup-node@v1
      with:
        node-version: 12.x

    - name: Package web
      run: |
        cd ./web/
        yarn install --frozen-lockfile
        yarn run build
      env:
        CI: true

    - name: Set up Python
      uses: actions/setup-python@v1
      with:
        python-version: ${{matrix.envinfo.python-version}}
        architecture: ${{matrix.envinfo.python-arch}}
        
    - name: Install dependencies
      run: |
        git lfs install
        git lfs pull
        python -m pip install --upgrade pip wheel setuptools pytest pytest-rerunfailures memory_profiler
        python -m pip install -r requirements.txt

    - name: Run test case
      timeout-minutes: 60
      shell: bash
      run: |
        mkdir -p ${{ env.TESTLOGPATH }}
        python -W ignore::DeprecationWarning -m pytest --show-capture=no \
          --log-level=ERROR \
          --log-file=${{ env.TESTLOGPATH }}${{ env.TESTLOGNAME }}.log

    - name: Upload log to artifact
      if: always()
      uses: actions/upload-artifact@v1
      with:
        name: ${{ env.TESTLOGNAME }}
        path: ${{ env.TESTLOGPATH }}

  deploy:
    needs: test
    strategy:
      matrix:
        python-version: [3.6.x]
        python-arch: [x64]

    env:
        PYTHONIOENCODING: "utf-8"

    runs-on: ubuntu-latest

    steps:
    - name: Checkout
      uses: actions/checkout@v2

    - name: Setup Node.js 12.x
      uses: actions/setup-node@v1
      with:
        node-version: 12.x

    - name: Package web
      run: |
        cd ./web/
        yarn install --frozen-lockfile
        yarn run build
      env:
        CI: true

    - name: Set up Python
      uses: actions/setup-python@v1
      with:
        python-version: ${{matrix.python-version}}
        architecture: ${{matrix.python-arch}}
        
    - name: Install dependencies
      run: |
        git lfs install
        git lfs pull
        python -m pip install --upgrade pip wheel setuptools
        python -m pip install -r requirements.txt

    - name: Build wheel on linux platform
      run: |
        pip list
        python setup.py sdist
        python setup.py bdist_wheel -p any
        rm -rf build
        python setup.py bdist_wheel -p manylinux1_x86_64
        rm -rf build
        python setup.py bdist_wheel -p win32
        rm -rf build
        python setup.py bdist_wheel -p win_amd64
        rm -rf build
        sphinx-build doc build/doc

    - name: Publish to pypi
      if: startsWith(github.event.ref, 'refs/tags')
      uses: pypa/gh-action-pypi-publish@master
      with:
        user: __token__
        password: ${{ secrets.PYPI_PASSWORD }}

    - name: Publish to github release
      if: startsWith(github.event.ref, 'refs/tags')
      uses: fnkr/github-action-ghr@v1
      env:
        GHR_PATH: dist/
        GITHUB_TOKEN: ${{ secrets.GITHUB_USER_TOKEN }}

    - name: Setup AWS S3 dist path
      if: startsWith(github.event.ref, 'refs/heads')
      shell: bash
      run: |
        echo "::set-env name=DIST_DIR::dist/tqsdk-python/$(echo ${GITHUB_REF#refs/heads/})/$(date -d today +%Y%m%d)_$(echo ${GITHUB_SHA:0:7})/"
        echo "::set-env name=DOC_DIR::docs/tqsdk-python/$(echo ${GITHUB_REF#refs/heads/})/"

    - name: Setup AWS S3 dist path on tag
      if: startsWith(github.event.ref, 'refs/tags')
      shell: bash
      run: |
        echo "::set-env name=DIST_DIR::dist/tqsdk-python/$(echo ${GITHUB_REF#refs/tags/})/"
        echo "::set-env name=DOC_DIR::docs/tqsdk-python/$(echo ${GITHUB_REF#refs/tags/})/"

    - name: Setup AWS S3 dist path on pull_request
      if: github.event_name == 'pull_request'
      run: |
        echo "::set-env name=DIST_DIR::dist/tqsdk-python/pr-${{ github.event.number }}/"

    - name: Publish dist to AWS S3
      uses: jakejarvis/s3-sync-action@master
      env:
        AWS_S3_BUCKET: ${{ secrets.BUCKET_NAME }}
        AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
        AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        AWS_REGION: ${{ secrets.AWS_REGION }}
        SOURCE_DIR: "dist"
        DEST_DIR: ${{ env.DIST_DIR }}

    - name: Publish tag build/doc to AWS S3
      if: github.event_name != 'pull_request'
      uses: jakejarvis/s3-sync-action@master
      with:
        args: --exclude '.doctrees/*'
      env:
        AWS_S3_BUCKET: ${{ secrets.BUCKET_NAME }}
        AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
        AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        AWS_REGION: ${{ secrets.AWS_REGION }}
        SOURCE_DIR: "build/doc"
        DEST_DIR: ${{ env.DOC_DIR }}